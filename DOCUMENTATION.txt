Documentação do Projeto: Kitty List

Este documento explica como o app Kitty List funciona, uma lista de tarefas com interface amigável e persistência local de dados.

## 1. Visão Geral

O aplicativo permite ao usuário:
* Adicionar novas tarefas
* Marcar tarefas como concluídas
* Editar tarefas existentes
* Remover tarefas com confirmação
* Visualizar tarefas separadas por status
* Interagir com gestos intuitivos

Os dados são armazenados localmente utilizando o banco de dados Hive.

## 2. Arquitetura

O projeto segue uma arquitetura básica de aplicativo Flutter, com foco na separação da UI, lógica de negócios e persistência de dados.

* **UI (User Interface):** Definida em `lib/main.dart` utilizando widgets do Flutter
* **Modelo de Dados:** Estrutura definida na classe `Task` em `lib/models/task.dart`
* **Persistência de Dados:** Implementada com o pacote Hive para armazenamento local

## 3. Principais Arquivos e Componentes

### `lib/main.dart`

Ponto de entrada do aplicativo com a lógica principal da interface e interação com o Hive.

* **`main()`:** Inicializa o Hive, registra o adaptador `TaskAdapter` e abre a box `tasksBox`
* **`MyApp`:** Widget raiz que configura o `MaterialApp` com título e tema
* **`TodoListScreen`:** Tela principal que gerencia o estado da lista de tarefas
* **`_TodoListScreenState`:**
  * `_tasksBox`: Referência para a box do Hive
  * `_textController`: Controla o campo de entrada de novas tarefas
  * `_textFieldFocusNode`: Gerencia o foco do campo de entrada
  * `_addTask()`: Adiciona nova tarefa
  * `_toggleTask()`: Marca/desmarca tarefa como concluída
  * `_removeTask()`: Remove uma tarefa
  * `_startEditing()`: Inicia edição de tarefa
  * `_saveEditing()`: Salva alterações na tarefa
  * `build()`: Constrói a interface com background, lista e controles

### `lib/models/task.dart`

Define a estrutura de dados para uma tarefa.

* **`Task`:** Classe com anotações do Hive
  * `title`: Título da tarefa
  * `isCompleted`: Status de conclusão
  * Construtor para criar novas tarefas

## 4. Persistência de Dados (Hive)

O Hive armazena as tarefas localmente em uma "box" (`tasksBox`). As operações de `add`, `save` e `deleteAt` persistem os dados. O `ValueListenableBuilder` atualiza a UI automaticamente quando há mudanças.

## 5. Layout e UI

A interface usa:
* `Stack` para sobrepor elementos
* `Positioned` para controle de posicionamento
* `Padding` para espaçamento
* Ajustes automáticos para teclado e barra de status
* Background personalizado
* Cores e estilos consistentes

## 6. Comandos Importantes

* `flutter pub get`: Instala dependências
* `flutter packages pub run build_runner build`: Gera arquivos do Hive
* `flutter pub run flutter_launcher_icons`: Gera ícones do app

## 7. Considerações para Desenvolvimento Futuro

* Categorias para tarefas
* Sistema de prioridades
* Notificações e lembretes
* Sincronização com nuvem
* Temas personalizáveis
* Animações e transições
* Tratamento de erros mais robusto

## 8. Autores

Acadêmicos de ADS da Univinte:
- Ana Carolina Bitencourt
- Ewellin Barreto
- Felipe Martins
- Manoel Vitor
- Patrick Luiz Farias
- Vitória Silva 